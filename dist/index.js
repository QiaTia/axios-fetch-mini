(()=>{"use strict";var e={395:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=class{handlers=[];use(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1}eject(e){this.handlers[e]&&this.handlers.splice(e,1)}forEach(e){this.handlers.forEach(e)}}},83:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=r(593);t.default=async function(e){const t={...e,url:(0,s.posUrl)(e.url)?e.url:`${e.baseUrl||""}${e.url||""}`};if("{}"!==JSON.stringify(e.params)){const r=(0,s.stringify)(e.params);t.url+=-1===t.url.indexOf("?")?`?${r}`:`&${r}`}const r=await fetch(t.url,t),a=r.headers.get("content-type");return r.config=e,a?.includes("json")?r.data=await r.json():r.data=await r.text(),r}},593:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.posUrl=t.stringify=void 0,t.stringify=function(e){return Object.keys(e).filter((t=>null!=e[t])).map((t=>`${t}=${e[t]}`)).join("&")},t.posUrl=(e="")=>/(http|https):\/\/([\w.]+\/?)\S*/.test(e)}},t={};function r(s){var a=t[s];if(void 0!==a)return a.exports;var o=t[s]={exports:{}};return e[s](o,o.exports,r),o.exports}(()=>{const e=r(395),t=r(83);class s{defaults={url:"",baseUrl:"",header:{"content-type":"application/json;charset=UTF-8"},method:"GET",dataType:"json",responseType:"text",custom:{},timeout:6e4};interceptors;constructor(t={}){this.defaults={...this.defaults,...t},this.interceptors={request:new e.default,response:new e.default}}static mergeConfig(e,t){return e.baseUrl=t.baseUrl,e.responseType=e.responseType||t.responseType,e.timeout=e.timeout||t.timeout,e.url=e.url||"",e.data=e.data||{},e.params=e.params||{},e.header=e.header||t.header,e.method=e.method||t.method,e.custom={...t.custom,...e.custom||{}},e}create(e){return new s(e)}request(e,r){"string"==typeof e?(r=r||{url:""}).url=e:r=e||this.defaults,r=s.mergeConfig(r,this.defaults);const a=[t.default,void 0];this.interceptors.response.forEach((({fulfilled:e,rejected:t})=>{a.push(e,t)})),this.interceptors.request.forEach((({fulfilled:e,rejected:t})=>{a.unshift(e,t)}));let o=Promise.resolve(r);for(;a.length;)o=o.then(a.shift(),a.shift());return o}get(e,t={},r={}){return this.request({...r,params:t,url:e,method:"GET"})}post(e,t={},r={}){return this.request({...r,data:t,url:e,method:"POST"})}put(e,t={},r={}){return this.request({...r,data:t,url:e,method:"PUT"})}delete(e,t={},r={}){return this.request({...r,data:t,url:e,method:"DELETE"})}down(e,t={},r={}){return this.request({...r,data:t,url:e,method:"DOWN"})}}window&&!window.axios&&(window.axios=new s)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,